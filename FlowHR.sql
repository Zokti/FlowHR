-- phpMyAdmin SQL Dump
-- version 5.2.0
-- https://www.phpmyadmin.net/
--
-- Хост: 127.0.0.1:3306
-- Время создания: Июн 20 2025 г., 02:42
-- Версия сервера: 8.0.30
-- Версия PHP: 7.2.34

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- База данных: `FlowHR`
--

-- --------------------------------------------------------

--
-- Структура таблицы `answers`
--

CREATE TABLE `answers` (
  `id` int NOT NULL,
  `question_id` int NOT NULL,
  `answer_text` text NOT NULL,
  `is_correct` tinyint(1) DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

--
-- Дамп данных таблицы `answers`
--

INSERT INTO `answers` (`id`, `question_id`, `answer_text`, `is_correct`) VALUES
(1, 1, 'Java Virtual Machine - виртуальная машина Java', 1),
(2, 1, 'Java Version Manager - менеджер версий Java', 0),
(3, 1, 'Java Visual Machine - визуальная машина Java', 0),
(4, 2, 'int', 1),
(5, 2, 'float', 0),
(6, 2, 'String', 0),
(7, 3, 'Создание нескольких методов с одинаковым именем, но разными параметрами', 1),
(8, 3, 'Изменение реализации метода в дочернем классе', 0),
(9, 3, 'Увеличение производительности метода', 0),
(10, 4, 'equals()', 1),
(11, 4, '==', 0),
(12, 4, 'compareTo()', 0),
(13, 5, 'Контракт, который класс должен реализовать', 1),
(14, 5, 'Класс с реализацией по умолчанию', 0),
(15, 5, 'Метод, который можно переопределить', 0),
(16, 6, 'start()', 1),
(17, 6, 'run()', 0),
(18, 6, 'execute()', 0),
(19, 7, 'Ошибка, которая возникает во время выполнения программы', 1),
(20, 7, 'Метод для обработки ошибок', 0),
(21, 7, 'Тип данных для хранения ошибок', 0),
(22, 8, 'package-private (доступ в пределах пакета)', 1),
(23, 8, 'public', 0),
(24, 8, 'private', 0),
(25, 9, 'Набор объектов, которые могут быть обработаны как единое целое', 1),
(26, 9, 'Метод для хранения данных', 0),
(27, 9, 'Тип данных для хранения массивов', 0),
(28, 10, 'Integer.parseInt()', 1),
(29, 10, 'String.toNumber()', 0),
(30, 10, 'Number.convert()', 0),
(31, 11, 'Механизм для создания типизированных классов и методов', 1),
(32, 11, 'Способ оптимизации производительности', 0),
(33, 11, 'Метод для работы с потоками', 0),
(34, 12, 'Автоматически освобождает память, удаляя неиспользуемые объекты', 1),
(35, 12, 'Удаляет все объекты после завершения программы', 0),
(36, 12, 'Требует ручного вызова для очистки памяти', 0),
(37, 13, 'Интерфейс с одним абстрактным методом', 1),
(38, 13, 'Интерфейс с несколькими методами по умолчанию', 0),
(39, 13, 'Интерфейс для работы с коллекциями', 0),
(40, 14, 'Позволяет анализировать и изменять структуру классов во время выполнения', 1),
(41, 14, 'Используется для оптимизации кода', 0),
(42, 14, 'Позволяет создавать новые классы во время выполнения', 0),
(43, 15, 'Свойство кода корректно работать в многопоточной среде', 1),
(44, 15, 'Способ ускорения работы программы', 0),
(45, 15, 'Метод для работы с файловой системой', 0),
(46, 16, 'Хранит уникальные строки для оптимизации памяти', 1),
(47, 16, 'Создает новые строки для каждого вызова', 0),
(48, 16, 'Удаляет строки после их использования', 0),
(49, 17, 'Метка для добавления метаданных к коду', 1),
(50, 17, 'Способ создания новых классов', 0),
(51, 17, 'Метод для работы с базами данных', 0),
(52, 18, 'Инициализация объекта только при первом обращении к нему', 1),
(53, 18, 'Инициализация всех объектов при запуске программы', 0),
(54, 18, 'Метод для работы с потоками', 0),
(55, 19, 'Система для организации кода в модули', 1),
(56, 19, 'Метод для работы с коллекциями', 0),
(57, 19, 'Способ оптимизации производительности', 0),
(58, 20, 'Позволяют выполнять операции над коллекциями в нескольких потоках', 1),
(59, 20, 'Используются для работы с файловой системой', 0),
(60, 20, 'Увеличивают производительность за счет кэширования', 0),
(61, 21, 'Типовые решения для часто встречающихся задач в проектировании', 1),
(62, 21, 'Способ оптимизации производительности', 0),
(63, 21, 'Метод для работы с базами данных', 0),
(64, 22, 'Загружает классы в память по мере необходимости', 1),
(65, 22, 'Загружает все классы при запуске программы', 0),
(66, 22, 'Удаляет классы после их использования', 0),
(67, 23, 'Объекты, состояние которых нельзя изменить после создания', 1),
(68, 23, 'Объекты, которые можно изменять в любом месте программы', 0),
(69, 23, 'Объекты, которые автоматически удаляются после использования', 0),
(70, 24, 'Позволяет создавать объекты-заместители для контроля доступа', 1),
(71, 24, 'Используется для оптимизации производительности', 0),
(72, 24, 'Метод для работы с потоками', 0),
(73, 25, 'Парадигма программирования, ориентированная на асинхронные потоки данных', 1),
(74, 25, 'Метод для работы с файловой системой', 0),
(75, 25, 'Способ оптимизации производительности', 0),
(76, 26, 'Преобразует объекты в поток байтов для сохранения или передачи', 1),
(77, 26, 'Используется для работы с базами данных', 0),
(78, 26, 'Метод для оптимизации памяти', 0),
(79, 27, 'Область памяти для хранения метаданных классов', 1),
(80, 27, 'Метод для работы с потоками', 0),
(81, 27, 'Способ оптимизации производительности', 0),
(82, 28, 'Позволяет создавать анонимные функции', 1),
(83, 28, 'Используется для работы с файловой системой', 0),
(84, 28, 'Метод для оптимизации памяти', 0),
(85, 29, 'Алгоритмы, которые не блокируют потоки выполнения', 1),
(86, 29, 'Метод для работы с базами данных', 0),
(87, 29, 'Способ оптимизации производительности', 0),
(88, 30, 'Позволяет работать с асинхронными вычислениями и цепочками вызовов', 1),
(89, 30, 'Используется для работы с файловой системой', 0),
(90, 30, 'Метод для оптимизации памяти', 0),
(91, 31, 'Высокоуровневый язык программирования', 1),
(92, 31, 'База данных', 0),
(93, 31, 'Операционная система', 0),
(94, 32, 'x = 10', 1),
(95, 32, 'var x = 10', 0),
(96, 32, 'int x = 10', 0),
(97, 33, 'Упорядоченная изменяемая коллекция элементов', 1),
(98, 33, 'Неизменяемая коллекция элементов', 0),
(99, 33, 'Коллекция ключ-значение', 0),
(100, 34, 'Итерирует по элементам последовательности', 1),
(101, 34, 'Выполняет блок кода определенное количество раз', 0),
(102, 34, 'Используется только для работы с числами', 0),
(103, 35, 'Блок кода, который можно вызывать с параметрами', 1),
(104, 35, 'Тип данных', 0),
(105, 35, 'Модуль', 0),
(106, 36, 'd = {\"key\": \"value\"}', 1),
(107, 36, 'd = [\"key\", \"value\"]', 0),
(108, 36, 'd = (\"key\", \"value\")', 0),
(109, 37, 'Файл с кодом, который можно импортировать', 1),
(110, 37, 'Тип данных', 0),
(111, 37, 'Цикл', 0),
(112, 38, 'Использовать блок try-except', 1),
(113, 38, 'Использовать блок if-else', 0),
(114, 38, 'Использовать блок for', 0),
(115, 39, 'Руководство по стилю кода на Python', 1),
(116, 39, 'Библиотека для работы с данными', 0),
(117, 39, 'Модуль для тестирования', 0),
(118, 40, 'import module_name', 1),
(119, 40, 'include module_name', 0),
(120, 40, 'require module_name', 0),
(121, 41, 'Функция, которая изменяет поведение другой функции', 1),
(122, 41, 'Тип данных', 0),
(123, 41, 'Модуль', 0),
(124, 42, 'Управляет ресурсами с помощью блоков with', 1),
(125, 42, 'Используется для работы с потоками', 0),
(126, 42, 'Метод для обработки исключений', 0),
(127, 43, 'Функция, которая возвращает итератор', 1),
(128, 43, 'Тип данных', 0),
(129, 43, 'Модуль', 0),
(130, 44, 'Ограничивает выполнение только одного потока в один момент времени', 1),
(131, 44, 'Увеличивает производительность многопоточных приложений', 0),
(132, 44, 'Используется для работы с файловой системой', 0),
(133, 45, 'Парадигма программирования для выполнения задач без блокировки', 1),
(134, 45, 'Метод для работы с базами данных', 0),
(135, 45, 'Способ оптимизации производительности', 0),
(136, 46, 'Позволяет создавать и управлять потоками', 1),
(137, 46, 'Используется для работы с файловой системой', 0),
(138, 46, 'Метод для обработки исключений', 0),
(139, 47, 'Классы, которые создают другие классы', 1),
(140, 47, 'Тип данных', 0),
(141, 47, 'Модуль', 0),
(142, 48, 'Позволяет писать асинхронный код', 1),
(143, 48, 'Используется для работы с базами данных', 0),
(144, 48, 'Метод для обработки исключений', 0),
(145, 49, 'Если объект ведет себя как утка, то это утка', 1),
(146, 49, 'Метод для работы с файловой системой', 0),
(147, 49, 'Способ оптимизации производительности', 0),
(148, 50, 'Предоставляет специализированные типы данных', 1),
(149, 50, 'Используется для работы с базами данных', 0),
(150, 50, 'Метод для обработки исключений', 0),
(151, 51, 'Типовые решения для часто встречающихся задач в проектировании', 1),
(152, 51, 'Способ оптимизации производительности', 0),
(153, 51, 'Метод для работы с базами данных', 0),
(154, 52, 'Загружает модули в память по мере необходимости', 1),
(155, 52, 'Загружает все модули при запуске программы', 0),
(156, 52, 'Удаляет модули после их использования', 0),
(157, 53, 'Объекты, состояние которых нельзя изменить после создания', 1),
(158, 53, 'Объекты, которые можно изменять в любом месте программы', 0),
(159, 53, 'Объекты, которые автоматически удаляются после использования', 0),
(160, 54, 'Позволяет создавать объекты-заместители для контроля доступа', 1),
(161, 54, 'Используется для оптимизации производительности', 0),
(162, 54, 'Метод для работы с потоками', 0),
(163, 55, 'Парадигма программирования, ориентированная на асинхронные потоки данных', 1),
(164, 55, 'Метод для работы с файловой системой', 0),
(165, 55, 'Способ оптимизации производительности', 0),
(166, 56, 'Преобразует объекты в поток байтов для сохранения или передачи', 1),
(167, 56, 'Используется для работы с базами данных', 0),
(168, 56, 'Метод для оптимизации памяти', 0),
(169, 57, 'Область памяти для хранения метаданных классов', 1),
(170, 57, 'Метод для работы с потоками', 0),
(171, 57, 'Способ оптимизации производительности', 0),
(172, 58, 'Позволяет создавать анонимные функции', 1),
(173, 58, 'Используется для работы с файловой системой', 0),
(174, 58, 'Метод для оптимизации памяти', 0),
(175, 59, 'Алгоритмы, которые не блокируют потоки выполнения', 1),
(176, 59, 'Метод для работы с базами данных', 0),
(177, 59, 'Способ оптимизации производительности', 0),
(178, 60, 'Позволяет работать с асинхронными вычислениями и цепочками вызовов', 1),
(179, 60, 'Используется для работы с файловой системой', 0),
(180, 60, 'Метод для оптимизации памяти', 0),
(181, 61, 'Язык программирования для создания интерактивных веб-страниц', 1),
(182, 61, 'База данных', 0),
(183, 61, 'Операционная система', 0),
(184, 62, 'let x = 10;', 1),
(185, 62, 'var x = 10;', 1),
(186, 62, 'int x = 10;', 0),
(187, 63, 'Упорядоченная коллекция элементов', 1),
(188, 63, 'Неупорядоченная коллекция элементов', 0),
(189, 63, 'Коллекция ключ-значение', 0),
(190, 64, 'Итерирует по элементам массива или объекта', 1),
(191, 64, 'Выполняет блок кода определенное количество раз', 1),
(192, 64, 'Используется только для работы с числами', 0),
(193, 65, 'Блок кода, который можно вызывать с параметрами', 1),
(194, 65, 'Тип данных', 0),
(195, 65, 'Модуль', 0),
(196, 66, 'const obj = {};', 1),
(197, 66, 'const obj = [];', 0),
(198, 66, 'const obj = new Object();', 1),
(199, 67, 'Программный интерфейс для работы с HTML и XML документами', 1),
(200, 67, 'Тип данных', 0),
(201, 67, 'Модуль', 0),
(202, 68, 'Использовать метод addEventListener', 1),
(203, 68, 'Использовать метод handleEvent', 0),
(204, 68, 'Использовать метод triggerEvent', 0),
(205, 69, 'Режим, который делает код более безопасным и строгим', 1),
(206, 69, 'Метод для работы с базами данных', 0),
(207, 69, 'Способ оптимизации производительности', 0),
(208, 70, 'Использовать метод push', 1),
(209, 70, 'Использовать метод add', 0),
(210, 70, 'Использовать метод insert', 0),
(211, 71, 'Функция, которая запоминает лексическое окружение, в котором она была создана', 1),
(212, 71, 'Тип данных', 0),
(213, 71, 'Модуль', 0),
(214, 72, 'Объекты наследуют свойства и методы от других объектов через прототипы', 1),
(215, 72, 'Объекты наследуют свойства и методы от классов', 0),
(216, 72, 'Объекты наследуют свойства и методы от интерфейсов', 0),
(217, 73, 'Объект, представляющий результат асинхронной операции', 1),
(218, 73, 'Тип данных', 0),
(219, 73, 'Модуль', 0),
(220, 74, 'Позволяет писать асинхронный код в синхронном стиле', 1),
(221, 74, 'Используется для работы с базами данных', 0),
(222, 74, 'Метод для обработки исключений', 0),
(223, 75, 'Функции с укороченным синтаксисом и лексическим this', 1),
(224, 75, 'Тип данных', 0),
(225, 75, 'Модуль', 0),
(226, 76, 'Позволяет создавать и обрабатывать события', 1),
(227, 76, 'Используется для работы с файловой системой', 0),
(228, 76, 'Метод для обработки исключений', 0),
(229, 77, 'Способ извлечения данных из массивов и объектов', 1),
(230, 77, 'Метод для работы с базами данных', 0),
(231, 77, 'Способ оптимизации производительности', 0),
(232, 78, 'Создает новую функцию с привязанным контекстом', 1),
(233, 78, 'Используется для работы с файловой системой', 0),
(234, 78, 'Метод для обработки исключений', 0),
(235, 79, 'Оптимизация, при которой результаты функций кэшируются', 1),
(236, 79, 'Метод для работы с базами данных', 0),
(237, 79, 'Способ оптимизации производительности', 0),
(238, 80, 'Позволяет работать с файловой системой', 1),
(239, 80, 'Используется для работы с базами данных', 0),
(240, 80, 'Метод для обработки исключений', 0),
(241, 81, 'Типовые решения для часто встречающихся задач в проектировании', 1),
(242, 81, 'Способ оптимизации производительности', 0),
(243, 81, 'Метод для работы с базами данных', 0),
(244, 82, 'Загружает модули в память по мере необходимости', 1),
(245, 82, 'Загружает все модули при запуске программы', 0),
(246, 82, 'Удаляет модули после их использования', 0),
(247, 83, 'Объекты, состояние которых нельзя изменить после создания', 1),
(248, 83, 'Объекты, которые можно изменять в любом месте программы', 0),
(249, 83, 'Объекты, которые автоматически удаляются после использования', 0),
(250, 84, 'Позволяет создавать объекты-заместители для контроля доступа', 1),
(251, 84, 'Используется для оптимизации производительности', 0),
(252, 84, 'Метод для работы с потоками', 0),
(253, 85, 'Парадигма программирования, ориентированная на асинхронные потоки данных', 1),
(254, 85, 'Метод для работы с файловой системой', 0),
(255, 85, 'Способ оптимизации производительности', 0),
(256, 86, 'Преобразует объекты в поток байтов для сохранения или передачи', 1),
(257, 86, 'Используется для работы с базами данных', 0),
(258, 86, 'Метод для оптимизации памяти', 0),
(259, 87, 'Область памяти для хранения метаданных классов', 1),
(260, 87, 'Метод для работы с потоками', 0),
(261, 87, 'Способ оптимизации производительности', 0),
(262, 88, 'Позволяет создавать анонимные функции', 1),
(263, 88, 'Используется для работы с файловой системой', 0),
(264, 88, 'Метод для оптимизации памяти', 0),
(265, 89, 'Алгоритмы, которые не блокируют потоки выполнения', 1),
(266, 89, 'Метод для работы с базами данных', 0),
(267, 89, 'Способ оптимизации производительности', 0),
(268, 90, 'Позволяет работать с асинхронными вычислениями и цепочками вызовов', 1),
(269, 90, 'Используется для работы с файловой системой', 0),
(270, 90, 'Метод для оптимизации памяти', 0);

-- --------------------------------------------------------

--
-- Структура таблицы `applications`
--

CREATE TABLE `applications` (
  `id` int NOT NULL,
  `job_id` int NOT NULL,
  `hr_id` int NOT NULL,
  `candidate_id` int DEFAULT NULL,
  `entity_type` enum('vacancy','resume') NOT NULL,
  `entity_id` int NOT NULL,
  `status` enum('pending','rejected','interview','hired') NOT NULL DEFAULT 'pending',
  `message` text,
  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

--
-- Дамп данных таблицы `applications`
--

INSERT INTO `applications` (`id`, `job_id`, `hr_id`, `candidate_id`, `entity_type`, `entity_id`, `status`, `message`, `created_at`) VALUES
(16, 11, 1, 2, 'resume', 25, 'pending', 'Здравствуйте. Заинтересовала ваше резюме хотим предложить вам вакансию в нашей компании', '2025-06-19 17:18:08');

-- --------------------------------------------------------

--
-- Структура таблицы `experiences`
--

CREATE TABLE `experiences` (
  `id` int NOT NULL,
  `name` varchar(100) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

--
-- Дамп данных таблицы `experiences`
--

INSERT INTO `experiences` (`id`, `name`) VALUES
(2, '1 год'),
(3, '2 года'),
(4, '3 года'),
(5, '4 года'),
(6, '5 лет'),
(1, 'без опыта');

-- --------------------------------------------------------

--
-- Структура таблицы `jobs`
--

CREATE TABLE `jobs` (
  `id` int NOT NULL,
  `title` varchar(255) NOT NULL,
  `description` text NOT NULL,
  `hr_id` int NOT NULL,
  `status` enum('active','closed') DEFAULT 'active',
  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `experience_id` int NOT NULL,
  `salary_id` int NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

--
-- Дамп данных таблицы `jobs`
--

INSERT INTO `jobs` (`id`, `title`, `description`, `hr_id`, `status`, `created_at`, `experience_id`, `salary_id`) VALUES
(6, 'Senior разработчик на Java', 'Должность: Senior Java разработчик  \r\nОбязанности:\r\n- Разработка и поддержка высоконагруженных backend-систем  \r\n- Оптимизация производительности и отказоустойчивости приложений  \r\n- Участие в проектировании архитектуры (микросервисы, Spring Boot)  \r\n- Code review, наставничество для junior/middle-разработчиков  \r\n- Интеграция с Kafka, Redis, Elasticsearch  \r\n\r\nТребования: \r\n- 5+ лет коммерческой разработки на Java  \r\n- Глубокое знание Spring Framework (Boot, Cloud, Data)  \r\n- Опыт с SQL/NoSQL (PostgreSQL, Cassandra)  \r\n- Понимание принципов CI/CD, Docker, Kubernetes  \r\n- Английский: Upper-Intermediate  \r\n\r\nУсловия:  \r\n- Удалёнка/гибрид, гибкий график  \r\n- Бонусы за performance, обучение за счёт компании  \r\n- Медицинская страховка + спортивная компенсация  ', 1, 'active', '2025-06-19 16:48:10', 6, 5),
(7, 'Senior C++ разработчик  ', 'Должность: Senior C++ разработчик  \r\nОбязанности:\r\n- Разработка low-latency систем для трейдинговых платформ  \r\n- Оптимизация алгоритмов обработки данных в реальном времени  \r\n- Портирувание legacy-кода на современные стандарты C++17/20  \r\n- Тестирование и профилирование (gprof, Valgrind)  \r\n\r\nТребования:\r\n- 5+ лет на C++ в high-performance проектах  \r\n- Знание многопоточности (Boost, STL async)  \r\n- Опыт с сетевыми протоколами (TCP/UDP, WebSocket)  \r\n- Понимание ОС Linux (системные вызовы, IPC)  \r\n- Математическая база (алгоритмы, структуры данных)  \r\n\r\nУсловия:  \r\n- Офис в ЦАО (Москва) или релокация  \r\n- Участие в opensource-проектах компании  \r\n- Ежеквартальные бонусы по KPI  ', 1, 'active', '2025-06-19 16:49:00', 6, 5),
(8, 'JavaScript разработчик (React/Node.js)  ', 'Должность: JavaScript разработчик (React/Node.js)  \r\nОбязанности:\r\n- Создание SPA на React.js (Next.js)  \r\n- Разработка API на Node.js (Express/Nest)  \r\n- Интеграция с базами данных (MongoDB, PostgreSQL)  \r\n- Вёрстка адаптивных интерфейсов (Material UI)  \r\n\r\nТребования:\r\n- 3+ года коммерческого опыта с JavaScript  \r\n- Опыт с React + Redux Toolkit / Zustand  \r\n- Знание TypeScript, Webpack, REST/GraphQL  \r\n- Базовое понимание DevOps (AWS/Docker)  \r\n- Английский: Intermediate+  \r\n\r\nУсловия:\r\n- Гибкий график, удалённая работа  \r\n- Годовой бюджет на курсы и конференции  \r\n- Компенсация co-working space  ', 1, 'active', '2025-06-19 16:50:43', 4, 3),
(9, 'PHP разработчик (Middle/Senior)  ', 'Должность: PHP разработчик (Middle/Senior)  \r\nОбязанности:\r\n- Разработка и поддержка CRM и ERP-систем  \r\n- Рефакторинг legacy-кода, внедрение современных практик  \r\n- Интеграция платежных систем (Stripe, PayPal)  \r\n- Написание unit-тестов (PHPUnit)  \r\n\r\nТребования:\r\n- 3+ года с PHP (Symfony/Laravel)  \r\n- Опыт с MySQL/PostgreSQL (оптимизация запросов)  \r\n- Знание Docker, Redis, RabbitMQ  \r\n- Понимание ООП, SOLID, паттернов проектирования  \r\n- Базовый английский (чтение документации)  \r\n\r\nУсловия:\r\n- Гибридный формат (Москва/СПб)  \r\n- Премии за внедрение идей  \r\n- Корпоративный психолог', 1, 'active', '2025-06-19 16:51:49', 4, 3),
(10, 'Python разработчик  ', 'Должность: Python разработчик  \r\nОбязанности:\r\n- Разработка ETL-пайплайнов для обработки данных  \r\n- Создание API для ML-моделей (FastAPI/Django)  \r\n- Анализ и визуализация данных (Pandas, Matplotlib)  \r\n- Автоматизация инфраструктуры (Terraform, Ansible)  \r\n\r\nТребования:\r\n- 3+ года на Python (asyncio, type hints)  \r\n- Опыт с Django/FastAPI, SQLAlchemy  \r\n- Знание облачных платформ (AWS/GCP)  \r\n- Базовые навыки Data Engineering (Airflow, Spark)  \r\n- Английский: Intermediate+  \r\n\r\nУсловия:\r\n- Удалёнка с возможностью офиса (раз в квартал)  \r\n- Доступ к GPU-кластеру для экспериментов  \r\n- Гранты на ML-курсы  ', 1, 'active', '2025-06-19 16:53:23', 4, 3),
(11, 'Разработчик на Javascript', 'Нужен разработчик с опытом более 3 лет. Который знает react и node.JS', 1, 'active', '2025-06-19 17:06:56', 4, 3);

-- --------------------------------------------------------

--
-- Структура таблицы `job_skills`
--

CREATE TABLE `job_skills` (
  `id` int NOT NULL,
  `job_id` int NOT NULL,
  `skill_id` int NOT NULL,
  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

--
-- Дамп данных таблицы `job_skills`
--

INSERT INTO `job_skills` (`id`, `job_id`, `skill_id`, `created_at`) VALUES
(36, 6, 1, '2025-06-19 16:48:10'),
(37, 7, 5, '2025-06-19 16:49:00'),
(38, 8, 4, '2025-06-19 16:50:43'),
(39, 9, 3, '2025-06-19 16:51:49'),
(40, 10, 2, '2025-06-19 16:53:23'),
(41, 11, 4, '2025-06-19 17:06:56');

-- --------------------------------------------------------

--
-- Структура таблицы `messages`
--

CREATE TABLE `messages` (
  `id` int NOT NULL,
  `application_id` int NOT NULL,
  `user_id` int NOT NULL,
  `content` text,
  `file_path` varchar(255) DEFAULT NULL,
  `file_type` varchar(50) DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

--
-- Дамп данных таблицы `messages`
--

INSERT INTO `messages` (`id`, `application_id`, `user_id`, `content`, `file_path`, `file_type`, `created_at`) VALUES
(7, 5, 1, 'привет', NULL, NULL, '2025-05-13 01:30:25'),
(8, 2, 1, 'Здравствуйте', NULL, NULL, '2025-05-13 01:49:09'),
(9, 2, 2, 'Здравствуйте, вас заинтересовало мое резюме?', NULL, NULL, '2025-05-13 22:28:32'),
(10, 2, 1, 'Да, как нам кажется вы будете прекрасным разработчиком в нашей компании с заработной платой 150000р в месяц + премии', NULL, NULL, '2025-05-13 22:29:25'),
(11, 3, 2, 'Хааай', NULL, NULL, '2025-05-16 14:41:12'),
(12, 3, 2, 'Ну, что как дела?', NULL, NULL, '2025-05-16 14:41:19'),
(13, 3, 1, 'прииив', NULL, NULL, '2025-05-16 14:42:19'),
(14, 3, 1, 'привки', NULL, NULL, '2025-05-16 14:43:29'),
(15, 3, 1, 'ог', NULL, NULL, '2025-05-16 14:43:34'),
(16, 3, 1, 'робит', NULL, NULL, '2025-05-16 14:43:38'),
(17, 3, 1, 'Вас пригласили на собеседование', NULL, NULL, '2025-05-16 15:11:22'),
(18, 3, 1, 'Ждем вас на собеседовании', NULL, NULL, '2025-05-16 15:11:32'),
(19, 3, 2, 'Спасибо, я прийду', NULL, NULL, '2025-05-16 15:11:48'),
(20, 3, 1, 'дада, ждем ждем', NULL, NULL, '2025-05-16 15:13:20'),
(21, 3, 2, 'буду буду', NULL, NULL, '2025-05-16 15:13:28'),
(22, 3, 1, 'пу пу прааау', NULL, NULL, '2025-05-16 15:15:12'),
(23, 3, 2, 'ка ка ка', NULL, NULL, '2025-05-16 15:15:21'),
(24, 3, 2, 'гра гра', NULL, NULL, '2025-05-16 15:15:29'),
(25, 3, 1, 'папа', NULL, NULL, '2025-05-16 15:15:34'),
(26, 7, 1, 'Хаааааай', NULL, NULL, '2025-05-21 19:36:45'),
(27, 7, 1, 'йоу', NULL, NULL, '2025-05-22 19:41:05'),
(28, 7, 1, 'Вы нам ответите?', NULL, NULL, '2025-05-30 02:57:01'),
(29, 16, 1, 'Здравствуйте. Нас заинтересовало ваше резюме, и мы хотели бы предложить вам местов  нашей компании. Если готовы рассмотреть наше предложение просим вас ответить и мы расскажем вам подробнее об вакансии и месте в офисе.', NULL, NULL, '2025-06-19 17:23:03');

-- --------------------------------------------------------

--
-- Структура таблицы `profile_fields`
--

CREATE TABLE `profile_fields` (
  `id` int NOT NULL,
  `field_name` varchar(50) NOT NULL,
  `field_label` varchar(100) NOT NULL,
  `is_required` tinyint(1) DEFAULT '0',
  `weight` int DEFAULT '1'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

--
-- Дамп данных таблицы `profile_fields`
--

INSERT INTO `profile_fields` (`id`, `field_name`, `field_label`, `is_required`, `weight`) VALUES
(1, 'name', 'ФИО', 1, 2),
(2, 'email', 'Email', 1, 2),
(3, 'phone', 'Телефон', 0, 1),
(4, 'age', 'Возраст', 0, 1),
(5, 'city', 'Город', 0, 1),
(6, 'avatar', 'Аватар', 0, 1);

-- --------------------------------------------------------

--
-- Структура таблицы `questions`
--

CREATE TABLE `questions` (
  `id` int NOT NULL,
  `test_id` int NOT NULL,
  `question_text` text NOT NULL,
  `max_score` int DEFAULT '10'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

--
-- Дамп данных таблицы `questions`
--

INSERT INTO `questions` (`id`, `test_id`, `question_text`, `max_score`) VALUES
(1, 1, 'Что такое JVM?', 10),
(2, 1, 'Какой тип данных используется для хранения целых чисел в Java?', 10),
(3, 1, 'Что такое \"перегрузка методов\" (method overloading)?', 10),
(4, 1, 'Какой оператор используется для сравнения двух объектов в Java?', 10),
(5, 1, 'Что такое \"интерфейс\" в Java?', 10),
(6, 1, 'Какой метод используется для запуска потока в Java?', 10),
(7, 1, 'Что такое \"исключение\" (exception) в Java?', 10),
(8, 1, 'Какой модификатор доступа используется по умолчанию в Java?', 10),
(9, 1, 'Что такое \"коллекция\" в Java?', 10),
(10, 1, 'Какой метод используется для преобразования строки в число?', 10),
(11, 2, 'Что такое \"дженерики\" (generics) в Java?', 10),
(12, 2, 'Как работает сборщик мусора (Garbage Collector) в Java?', 10),
(13, 2, 'Что такое \"функциональный интерфейс\" (functional interface) в Java?', 10),
(14, 2, 'Как работает механизм \"рефлексии\" (reflection) в Java?', 10),
(15, 2, 'Что такое \"потокобезопасность\" (thread safety) и как её достичь?', 10),
(16, 2, 'Как работает \"пул строк\" (String Pool) в Java?', 10),
(17, 2, 'Что такое \"аннотации\" (annotations) в Java и как их использовать?', 10),
(18, 2, 'Как работает \"ленивая инициализация\" (lazy initialization) в Java?', 10),
(19, 2, 'Что такое \"модульность\" (module system) в Java 9+?', 10),
(20, 2, 'Как работает \"параллельные стримы\" (parallel streams) в Java?', 10),
(21, 3, 'Что такое \"паттерн проектирования\" (design pattern) и приведите примеры?', 10),
(22, 3, 'Как работает \"механизм загрузки классов\" (class loading) в Java?', 10),
(23, 3, 'Что такое \"неизменяемые объекты\" (immutable objects) и как их создать?', 10),
(24, 3, 'Как работает \"механизм прокси\" (proxy) в Java?', 10),
(25, 3, 'Что такое \"реактивное программирование\" (reactive programming) в Java?', 10),
(26, 3, 'Как работает \"механизм сериализации\" (serialization) в Java?', 10),
(27, 3, 'Что такое \"метапространство\" (metaspace) в Java?', 10),
(28, 3, 'Как работает \"механизм лямбда-выражений\" (lambda expressions) в Java?', 10),
(29, 3, 'Что такое \"неблокирующие алгоритмы\" (non-blocking algorithms) в Java?', 10),
(30, 3, 'Как работает \"механизм CompletableFuture\" в Java?', 10),
(31, 4, 'Что такое Python?', 10),
(32, 4, 'Как объявить переменную в Python?', 10),
(33, 4, 'Что такое список (list) в Python?', 10),
(34, 4, 'Как работает цикл for в Python?', 10),
(35, 4, 'Что такое функция в Python?', 10),
(36, 4, 'Как создать словарь (dictionary) в Python?', 10),
(37, 4, 'Что такое модуль в Python?', 10),
(38, 4, 'Как обработать исключение в Python?', 10),
(39, 4, 'Что такое PEP 8?', 10),
(40, 4, 'Как импортировать модуль в Python?', 10),
(41, 5, 'Что такое декоратор (decorator) в Python?', 10),
(42, 5, 'Как работает менеджер контекста (context manager) в Python?', 10),
(43, 5, 'Что такое генератор (generator) в Python?', 10),
(44, 5, 'Как работает механизм GIL (Global Interpreter Lock) в Python?', 10),
(45, 5, 'Что такое асинхронное программирование в Python?', 10),
(46, 5, 'Как работает модуль threading в Python?', 10),
(47, 5, 'Что такое метаклассы (metaclasses) в Python?', 10),
(48, 5, 'Как работает модуль asyncio в Python?', 10),
(49, 5, 'Что такое \"утиная типизация\" (duck typing) в Python?', 10),
(50, 5, 'Как работает модуль collections в Python?', 10),
(51, 6, 'Что такое \"паттерн проектирования\" (design pattern) и приведите примеры?', 10),
(52, 6, 'Как работает механизм загрузки модулей (module loading) в Python?', 10),
(53, 6, 'Что такое \"неизменяемые объекты\" (immutable objects) и как их создать?', 10),
(54, 6, 'Как работает механизм прокси (proxy) в Python?', 10),
(55, 6, 'Что такое \"реактивное программирование\" (reactive programming) в Python?', 10),
(56, 6, 'Как работает механизм сериализации (serialization) в Python?', 10),
(57, 6, 'Что такое \"метапространство\" (metaspace) в Python?', 10),
(58, 6, 'Как работает механизм лямбда-выражений (lambda expressions) в Python?', 10),
(59, 6, 'Что такое \"неблокирующие алгоритмы\" (non-blocking algorithms) в Python?', 10),
(60, 6, 'Как работает механизм CompletableFuture в Python?', 10),
(61, 7, 'Что такое JavaScript?', 10),
(62, 7, 'Как объявить переменную в JavaScript?', 10),
(63, 7, 'Что такое массив (array) в JavaScript?', 10),
(64, 7, 'Как работает цикл for в JavaScript?', 10),
(65, 7, 'Что такое функция в JavaScript?', 10),
(66, 7, 'Как создать объект (object) в JavaScript?', 10),
(67, 7, 'Что такое DOM (Document Object Model)?', 10),
(68, 7, 'Как обработать событие (event) в JavaScript?', 10),
(69, 7, 'Что такое \"строгий режим\" (strict mode) в JavaScript?', 10),
(70, 7, 'Как добавить элемент в массив в JavaScript?', 10),
(71, 8, 'Что такое замыкание (closure) в JavaScript?', 10),
(72, 8, 'Как работает прототипное наследование (prototypal inheritance) в JavaScript?', 10),
(73, 8, 'Что такое Promise в JavaScript?', 10),
(74, 8, 'Как работает асинхронность (async/await) в JavaScript?', 10),
(75, 8, 'Что такое \"стрелочные функции\" (arrow functions) в JavaScript?', 10),
(76, 8, 'Как работает модуль EventEmitter в Node.js?', 10),
(77, 8, 'Что такое \"деструктуризация\" (destructuring) в JavaScript?', 10),
(78, 8, 'Как работает метод bind в JavaScript?', 10),
(79, 8, 'Что такое \"мемоизация\" (memoization) в JavaScript?', 10),
(80, 8, 'Как работает модуль fs в Node.js?', 10),
(81, 9, 'Что такое \"паттерн проектирования\" (design pattern) и приведите примеры?', 10),
(82, 9, 'Как работает механизм загрузки модулей (module loading) в JavaScript?', 10),
(83, 9, 'Что такое \"неизменяемые объекты\" (immutable objects) и как их создать?', 10),
(84, 9, 'Как работает механизм прокси (proxy) в JavaScript?', 10),
(85, 9, 'Что такое \"реактивное программирование\" (reactive programming) в JavaScript?', 10),
(86, 9, 'Как работает механизм сериализации (serialization) в JavaScript?', 10),
(87, 9, 'Что такое \"метапространство\" (metaspace) в JavaScript?', 10),
(88, 9, 'Как работает механизм лямбда-выражений (lambda expressions) в JavaScript?', 10),
(89, 9, 'Что такое \"неблокирующие алгоритмы\" (non-blocking algorithms) в JavaScript?', 10),
(90, 9, 'Как работает механизм CompletableFuture в JavaScript?', 10);

-- --------------------------------------------------------

--
-- Структура таблицы `results`
--

CREATE TABLE `results` (
  `id` int NOT NULL,
  `test_id` int NOT NULL,
  `user_id` int NOT NULL,
  `score` int NOT NULL,
  `time_taken` int NOT NULL,
  `completed_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

--
-- Дамп данных таблицы `results`
--

INSERT INTO `results` (`id`, `test_id`, `user_id`, `score`, `time_taken`, `completed_at`) VALUES
(1, 2, 2, 40, 0, '2025-03-15 01:44:29'),
(2, 1, 2, 0, 0, '2025-03-16 02:46:50'),
(3, 5, 2, 30, 0, '2025-03-16 02:48:47'),
(4, 4, 2, 40, 0, '2025-03-16 18:19:52'),
(5, 9, 2, 60, 0, '2025-03-17 23:06:06'),
(6, 3, 2, 40, 0, '2025-04-07 03:05:14');

-- --------------------------------------------------------

--
-- Структура таблицы `resumes`
--

CREATE TABLE `resumes` (
  `id` int NOT NULL,
  `title` varchar(255) NOT NULL,
  `description` text,
  `visibility_duration` int NOT NULL,
  `salary_id` int DEFAULT NULL,
  `experience_id` int DEFAULT NULL,
  `user_id` int NOT NULL,
  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `is_published` tinyint(1) DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

--
-- Дамп данных таблицы `resumes`
--

INSERT INTO `resumes` (`id`, `title`, `description`, `visibility_duration`, `salary_id`, `experience_id`, `user_id`, `created_at`, `is_published`) VALUES
(20, 'Senior Java Developer с 7-летним опытом', 'Профессиональный профиль:\r\nSenior Java Developer с 7-летним опытом в создании микросервисных архитектур для fintech. Эксперт в оптимизации high-load систем (до 50k RPS). Активно использую Spring Boot, Kafka, Kubernetes. Готов решать сложные задачи и делиться опытом с командой.  \r\n\r\nКлючевые навыки:\r\n- Java 17+, Spring (Boot/Cloud/Security), Hibernate  \r\n- Микросервисы, REST/gRPC, Apache Kafka  \r\n- PostgreSQL, MongoDB, Redis  \r\n- Docker, Kubernetes, GitLab CI/CD  \r\n- JUnit, Mockito, нагрузочное тестирование', 30, 5, 6, 9, '2025-06-19 16:56:51', 1),
(21, 'Senior C++ Developer, специализация – low-latency системы для финансовых рынков', 'Профессиональный профиль: \r\nSenior C++ Developer, специализация – low-latency системы для финансовых рынков. Опыт разработки ядер высокочастотных трейдинговых движков. Глубокие знания C++17/20, многопоточности, сетевых стеков. Фокус на производительности и безопасности кода.  \r\n\r\nКлючевые навыки:\r\n- C++17/20, STL, Boost (Asio, Thread)  \r\n- Многопоточность, lock-free структуры  \r\n- Linux/Windows kernel-level оптимизация  \r\n- Сетевое программирование (TCP/IP, FIX)  \r\n- gdb, Valgrind, Jenkins', 14, 5, 6, 10, '2025-06-19 17:01:26', 1),
(22, 'Fullstack JS Developer', 'Профессиональный профиль: \r\nFullstack JS Developer с 4-летним опытом. Специализация – создание интерактивных веб-приложений (e-commerce, edtech). Предпочитаю современный стек: React + TypeScript, Node.js, serverless. Умею работать с дизайн-системами и оптимизировать UX.  \r\n\r\n**Ключевые навыки:**  \r\n- React, Next.js, Redux, Zustand  \r\n- Node.js, Express, NestJS  \r\n- TypeScript, JavaScript (ES6+)  \r\n- MongoDB, PostgreSQL, Firebase  \r\n- Jest, Cypress, GitLab CI', 7, 5, 5, 3, '2025-06-19 17:03:00', 1),
(23, 'PHP Developer с экспертизой в Laravel и Symfony', 'Профессиональный профиль:  \r\nPHP Developer с экспертизой в Laravel и Symfony. Автоматизировал бизнес-процессы для 20+ клиентов в e-commerce и логистике. Активно применяю DDD, пишу тестируемый код. Имею опыт миграции монолитов на микросервисы.  \r\n\r\nКлючевые навыки:\r\n- PHP 8+, Laravel, Symfony  \r\n- MySQL, PostgreSQL, Redis  \r\n- Docker, Kubernetes, AWS Lightsail  \r\n- REST API, JWT, OAuth2  \r\n- PHPUnit, TDD, Swagger', 30, 5, 6, 2, '2025-06-19 17:03:59', 1),
(24, 'Python Developer с фокусом на Data-инфраструктуру', 'Профессиональный профиль:  \r\nPython Developer с фокусом на Data-инфраструктуру. Участвовал в построении платформ для обработки больших данных (до 1 TB/день). Интегрировал ML-модели в production. Пишу чистый, документированный код с акцентом на scalability.  \r\n\r\nКлючевые навыки:\r\n- Python (Pandas, NumPy, SciPy)  \r\n- FastAPI, Django, Flask  \r\n- PostgreSQL, BigQuery, Elasticsearch  \r\n- Apache Airflow, Luigi, DVC  \r\n- Docker, Kubernetes, GCP/AWS', 14, 3, 4, 2, '2025-06-19 17:05:03', 1),
(25, 'Разработчик на Javascript - React, Node.JS', 'Более 3 лет опыта работы с js и библиотеками', 14, 3, 4, 2, '2025-06-19 17:08:02', 1);

-- --------------------------------------------------------

--
-- Структура таблицы `resume_responses`
--

CREATE TABLE `resume_responses` (
  `id` int NOT NULL,
  `resume_id` int NOT NULL,
  `hr_id` int NOT NULL,
  `status` enum('pending','accepted','rejected') DEFAULT 'pending',
  `message` text,
  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

-- --------------------------------------------------------

--
-- Структура таблицы `resume_skills`
--

CREATE TABLE `resume_skills` (
  `resume_id` int NOT NULL,
  `skill_id` int NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

--
-- Дамп данных таблицы `resume_skills`
--

INSERT INTO `resume_skills` (`resume_id`, `skill_id`) VALUES
(20, 1),
(24, 2),
(23, 3),
(22, 4),
(25, 4),
(21, 5);

-- --------------------------------------------------------

--
-- Структура таблицы `reviews`
--

CREATE TABLE `reviews` (
  `id` int NOT NULL,
  `candidate_id` int NOT NULL,
  `hr_id` int NOT NULL,
  `rating` int DEFAULT NULL,
  `comment` text,
  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP
) ;

-- --------------------------------------------------------

--
-- Структура таблицы `salaries`
--

CREATE TABLE `salaries` (
  `id` int NOT NULL,
  `salary_range` varchar(100) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

--
-- Дамп данных таблицы `salaries`
--

INSERT INTO `salaries` (`id`, `salary_range`) VALUES
(5, '100000-150000'),
(4, '1000001'),
(6, '200000'),
(1, '50000'),
(2, '50000-80000'),
(7, '500000'),
(3, '80000-100000');

-- --------------------------------------------------------

--
-- Структура таблицы `skills`
--

CREATE TABLE `skills` (
  `id` int NOT NULL,
  `name` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

--
-- Дамп данных таблицы `skills`
--

INSERT INTO `skills` (`id`, `name`) VALUES
(11, 'Адаптивность'),
(8, 'Аналитические навыки'),
(5, 'Знание языка программирования C++'),
(1, 'Знание языка программирования Java'),
(4, 'Знание языка программирования JavaScript'),
(3, 'Знание языка программирования PHP'),
(2, 'Знание языка программирования Python'),
(9, 'Коммуникативные навыки'),
(7, 'Креативность'),
(12, 'Критическое мышление'),
(10, 'Опыт работы с базами данных SQL '),
(6, 'Тимбилдинг и работа в команде');

-- --------------------------------------------------------

--
-- Структура таблицы `tests`
--

CREATE TABLE `tests` (
  `id` int NOT NULL,
  `title` varchar(255) NOT NULL,
  `time_limit` int NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

--
-- Дамп данных таблицы `tests`
--

INSERT INTO `tests` (`id`, `title`, `time_limit`) VALUES
(1, 'Тест по Java для Junior разработчика', 1800),
(2, 'Тест по Java для Middle разработчика', 1800),
(3, 'Тест по Java для Senior разработчика', 1800),
(4, 'Тест по Python для Junior разработчика', 1800),
(5, 'Тест по Python для Middle разработчика', 1800),
(6, 'Тест по Python для Senior разработчика', 1800),
(7, 'Тест по JavaScript для Junior разработчика', 1800),
(8, 'Тест по JavaScript для Middle разработчика', 1800),
(9, 'Тест по JavaScript для Senior разработчика', 1800);

-- --------------------------------------------------------

--
-- Структура таблицы `users`
--

CREATE TABLE `users` (
  `id` int NOT NULL,
  `name` varchar(255) NOT NULL,
  `email` varchar(255) NOT NULL,
  `login` varchar(100) NOT NULL,
  `password` varchar(255) NOT NULL,
  `role` enum('HR','candidate','admin','moderator') CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `avatar` varchar(255) DEFAULT 'default_avatar.png',
  `is_blocked` tinyint(1) DEFAULT '0',
  `blocked_until` timestamp NULL DEFAULT NULL,
  `age` int DEFAULT NULL,
  `phone` varchar(20) DEFAULT NULL,
  `city` varchar(100) DEFAULT NULL,
  `profile_completion` int DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

--
-- Дамп данных таблицы `users`
--

INSERT INTO `users` (`id`, `name`, `email`, `login`, `password`, `role`, `created_at`, `avatar`, `is_blocked`, `blocked_until`, `age`, `phone`, `city`, `profile_completion`) VALUES
(1, 'Ульянов Кирилл Сергеевич', 'dokl200100300400@gmail.com', 'Zokti', '$2y$10$9uFBgzFitZKQy4m4NWvpNu4XcP2m5Gsx855eWxAbvL/I4DL.MtF5u', 'HR', '2025-03-15 01:35:56', '1_mUSaJisDp5g.jpg', 0, NULL, 20, '+79204990656', 'Таганрог', 100),
(2, 'Черман Алексей Николаевич', 'doctor3play@gmail.com', 'shick', '$2y$10$sU.jqsCdEWxHAle./tHtPOQ/JhS5NCoKupLjZWp5DlJWbJomRBEke', 'candidate', '2025-03-15 01:36:50', '2_5226613816845003836_99.jpg', 0, NULL, 19, '+79999999999', 'Донецк', 100),
(3, 'Сотников Даниил', 'sotka@gmail.com', 'sotka', '$2y$10$5.kmbdhwrPj1XDZ/JwUKTuHo.XtMUNtInKpnBrr.6lxTKJPt4IEl.', 'candidate', '2025-03-16 11:07:38', '3_1750352536_3660360542460160061_1.jpg', 0, NULL, 21, '+79553535555', 'Таганрог', 100),
(4, 'Ульянова Екатерина Николаевна', 'katrin@gmail.com', 'katrin', '$2y$10$nVNBZVInP1k8.L5dkLJ9Q.SsZwm3EAbGu.2EKMbW9v7LQNICglN4u', 'admin', '2025-03-17 00:29:55', '4_1750375306_1.jpg', 0, NULL, NULL, NULL, NULL, 63),
(5, 'moderator', 'moder@gmail.com', 'moderator', '$2y$10$lK7.PKMlHn7fTSwfr0S1K.dAEsfLSDOtR4Y0/a060bCkq.4BhQ5zW', 'moderator', '2025-03-18 19:09:48', '5_1750196188_Vergil Icon DMC.jpg', 0, NULL, NULL, NULL, NULL, 63),
(7, 'tun tun tun tun Sahur', 'sahur@gmail.com', 'sahur', '$2y$10$fo61LCUhE0zLgb7iYQLWQuaeDS.Js/qu3MrA4jJ14PIqQ78CQ.ruW', 'candidate', '2025-05-21 19:54:41', '7_1747857346_{B9F1440F-2EB2-41FF-B470-8CFEE755912E}.png', 0, NULL, NULL, NULL, NULL, 63),
(8, '123', 'csttsets@mail.ru', '123', '$2y$10$2njkfZXaR6kzvJX0LjjdcOLI3MBdGgzioAQ56OqTG/5pwuWGSiwQe', 'candidate', '2025-06-07 06:31:30', '8_1749277978_Лехохол (10).jpg', 0, NULL, NULL, NULL, NULL, 63),
(9, 'Спардович Диниила', 'sparda@gmail.com', 'dante', '$2y$10$Ikn72SRKcejdylAWwe9PPeP0nm90CgCIBfNZh5Jrfw11CTJxrnqQa', 'candidate', '2025-06-19 16:54:48', '9_1750352116_Без названия.jpg', 0, NULL, 38, '+79999999999', 'Ред грейв', 100),
(10, 'Спардович Виталий', 'spardason@gmail.com', 'vergil', '$2y$10$1wRPjnSsIvFrVJXtS.stJOWrKOz6uvpvXJpXJW2ps2.BVn.v5URUi', 'candidate', '2025-06-19 16:59:20', '10_1750352374_Vergil Icon DMC.jpg', 0, NULL, 40, '+79998885555', 'Ред грейв', 100);

--
-- Индексы сохранённых таблиц
--

--
-- Индексы таблицы `answers`
--
ALTER TABLE `answers`
  ADD PRIMARY KEY (`id`),
  ADD KEY `question_id` (`question_id`);

--
-- Индексы таблицы `applications`
--
ALTER TABLE `applications`
  ADD PRIMARY KEY (`id`),
  ADD KEY `job_id` (`job_id`),
  ADD KEY `hr_id` (`hr_id`),
  ADD KEY `candidate_id` (`candidate_id`);

--
-- Индексы таблицы `experiences`
--
ALTER TABLE `experiences`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `name` (`name`);

--
-- Индексы таблицы `jobs`
--
ALTER TABLE `jobs`
  ADD PRIMARY KEY (`id`),
  ADD KEY `user_id` (`hr_id`),
  ADD KEY `experience_id` (`experience_id`),
  ADD KEY `salary_id` (`salary_id`);

--
-- Индексы таблицы `job_skills`
--
ALTER TABLE `job_skills`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `unique_job_skill` (`job_id`,`skill_id`),
  ADD KEY `skill_id` (`skill_id`);

--
-- Индексы таблицы `messages`
--
ALTER TABLE `messages`
  ADD PRIMARY KEY (`id`),
  ADD KEY `application_id` (`application_id`),
  ADD KEY `user_id` (`user_id`);

--
-- Индексы таблицы `profile_fields`
--
ALTER TABLE `profile_fields`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `questions`
--
ALTER TABLE `questions`
  ADD PRIMARY KEY (`id`),
  ADD KEY `test_id` (`test_id`);

--
-- Индексы таблицы `results`
--
ALTER TABLE `results`
  ADD PRIMARY KEY (`id`),
  ADD KEY `test_id` (`test_id`),
  ADD KEY `user_id` (`user_id`);

--
-- Индексы таблицы `resumes`
--
ALTER TABLE `resumes`
  ADD PRIMARY KEY (`id`),
  ADD KEY `salary_id` (`salary_id`),
  ADD KEY `user_id` (`user_id`),
  ADD KEY `fk_resumes_experience` (`experience_id`);

--
-- Индексы таблицы `resume_responses`
--
ALTER TABLE `resume_responses`
  ADD PRIMARY KEY (`id`),
  ADD KEY `resume_id` (`resume_id`),
  ADD KEY `hr_id` (`hr_id`);

--
-- Индексы таблицы `resume_skills`
--
ALTER TABLE `resume_skills`
  ADD PRIMARY KEY (`resume_id`,`skill_id`),
  ADD KEY `skill_id` (`skill_id`);

--
-- Индексы таблицы `reviews`
--
ALTER TABLE `reviews`
  ADD PRIMARY KEY (`id`),
  ADD KEY `candidate_id` (`candidate_id`),
  ADD KEY `hr_id` (`hr_id`);

--
-- Индексы таблицы `salaries`
--
ALTER TABLE `salaries`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `salary_range` (`salary_range`);

--
-- Индексы таблицы `skills`
--
ALTER TABLE `skills`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `name` (`name`);

--
-- Индексы таблицы `tests`
--
ALTER TABLE `tests`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `email` (`email`),
  ADD UNIQUE KEY `login` (`login`),
  ADD UNIQUE KEY `login_2` (`login`),
  ADD UNIQUE KEY `email_2` (`email`),
  ADD UNIQUE KEY `login_3` (`login`),
  ADD UNIQUE KEY `email_3` (`email`);

--
-- AUTO_INCREMENT для сохранённых таблиц
--

--
-- AUTO_INCREMENT для таблицы `answers`
--
ALTER TABLE `answers`
  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=271;

--
-- AUTO_INCREMENT для таблицы `applications`
--
ALTER TABLE `applications`
  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=17;

--
-- AUTO_INCREMENT для таблицы `experiences`
--
ALTER TABLE `experiences`
  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=7;

--
-- AUTO_INCREMENT для таблицы `jobs`
--
ALTER TABLE `jobs`
  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=12;

--
-- AUTO_INCREMENT для таблицы `job_skills`
--
ALTER TABLE `job_skills`
  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=42;

--
-- AUTO_INCREMENT для таблицы `messages`
--
ALTER TABLE `messages`
  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=30;

--
-- AUTO_INCREMENT для таблицы `profile_fields`
--
ALTER TABLE `profile_fields`
  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=7;

--
-- AUTO_INCREMENT для таблицы `questions`
--
ALTER TABLE `questions`
  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=91;

--
-- AUTO_INCREMENT для таблицы `results`
--
ALTER TABLE `results`
  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=7;

--
-- AUTO_INCREMENT для таблицы `resumes`
--
ALTER TABLE `resumes`
  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=26;

--
-- AUTO_INCREMENT для таблицы `resume_responses`
--
ALTER TABLE `resume_responses`
  MODIFY `id` int NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT для таблицы `reviews`
--
ALTER TABLE `reviews`
  MODIFY `id` int NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT для таблицы `salaries`
--
ALTER TABLE `salaries`
  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=8;

--
-- AUTO_INCREMENT для таблицы `skills`
--
ALTER TABLE `skills`
  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=13;

--
-- AUTO_INCREMENT для таблицы `tests`
--
ALTER TABLE `tests`
  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=10;

--
-- AUTO_INCREMENT для таблицы `users`
--
ALTER TABLE `users`
  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=11;

--
-- Ограничения внешнего ключа сохраненных таблиц
--

--
-- Ограничения внешнего ключа таблицы `answers`
--
ALTER TABLE `answers`
  ADD CONSTRAINT `answers_ibfk_1` FOREIGN KEY (`question_id`) REFERENCES `questions` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `applications`
--
ALTER TABLE `applications`
  ADD CONSTRAINT `applications_ibfk_1` FOREIGN KEY (`job_id`) REFERENCES `jobs` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `applications_ibfk_2` FOREIGN KEY (`hr_id`) REFERENCES `users` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `applications_ibfk_3` FOREIGN KEY (`candidate_id`) REFERENCES `users` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `jobs`
--
ALTER TABLE `jobs`
  ADD CONSTRAINT `jobs_ibfk_1` FOREIGN KEY (`hr_id`) REFERENCES `users` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `jobs_ibfk_2` FOREIGN KEY (`experience_id`) REFERENCES `experiences` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `jobs_ibfk_3` FOREIGN KEY (`salary_id`) REFERENCES `salaries` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `job_skills`
--
ALTER TABLE `job_skills`
  ADD CONSTRAINT `job_skills_ibfk_1` FOREIGN KEY (`job_id`) REFERENCES `jobs` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `job_skills_ibfk_2` FOREIGN KEY (`skill_id`) REFERENCES `skills` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `messages`
--
ALTER TABLE `messages`
  ADD CONSTRAINT `messages_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `questions`
--
ALTER TABLE `questions`
  ADD CONSTRAINT `questions_ibfk_1` FOREIGN KEY (`test_id`) REFERENCES `tests` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `results`
--
ALTER TABLE `results`
  ADD CONSTRAINT `results_ibfk_1` FOREIGN KEY (`test_id`) REFERENCES `tests` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `results_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `resumes`
--
ALTER TABLE `resumes`
  ADD CONSTRAINT `fk_resumes_experience` FOREIGN KEY (`experience_id`) REFERENCES `experiences` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  ADD CONSTRAINT `resumes_ibfk_1` FOREIGN KEY (`salary_id`) REFERENCES `salaries` (`id`) ON DELETE SET NULL,
  ADD CONSTRAINT `resumes_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `resume_responses`
--
ALTER TABLE `resume_responses`
  ADD CONSTRAINT `resume_responses_ibfk_1` FOREIGN KEY (`resume_id`) REFERENCES `resumes` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `resume_responses_ibfk_2` FOREIGN KEY (`hr_id`) REFERENCES `users` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `resume_skills`
--
ALTER TABLE `resume_skills`
  ADD CONSTRAINT `resume_skills_ibfk_1` FOREIGN KEY (`resume_id`) REFERENCES `resumes` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `resume_skills_ibfk_2` FOREIGN KEY (`skill_id`) REFERENCES `skills` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `reviews`
--
ALTER TABLE `reviews`
  ADD CONSTRAINT `reviews_ibfk_1` FOREIGN KEY (`candidate_id`) REFERENCES `users` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `reviews_ibfk_2` FOREIGN KEY (`hr_id`) REFERENCES `users` (`id`) ON DELETE CASCADE;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
